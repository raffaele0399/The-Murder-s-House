package Grafica;

import Rete.ClientChat;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.net.Socket;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;

/**
 * Classe che crea un interfaccia grafica per l'azione di chatting tra diversi giocatori.
 * @author Raffaele Nacci
 * @author Manuel Roberto Matera
 */
public class InterfacciaChat extends javax.swing.JFrame {

    private Socket socket;
    private ClientChat client;
    
    private static final String NOME_UTENTE_NON_DISPONIBILE = "NOME UTENTE NON DISPONIBILE";

    /**
     * Costruttore di default.
     */
    public InterfacciaChat(){
        initComponents();
    }

    /**
     * Costruttore che associa una serie di parametri a tutti gli attributi di questa classe,
     * inoltre inizializza un nuovo oggetto di tipo ClientChat e gestisce la pressione del tasto invio.
     * @param socket
     * @param nomeUtente 
     */
    public InterfacciaChat(Socket socket, String nomeUtente) {
        initComponents();

        this.socket = socket;

        client = new ClientChat(this.socket, nomeUtente, this);
        client.riceviMessaggio();

        areaDiTesto.addKeyListener(new KeyAdapter() {
            @Override
            public void keyPressed(KeyEvent e) {
                if (e.getKeyCode() == KeyEvent.VK_ENTER) {
                    buttonOk.doClick();
                }
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        sfondo = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        areaDiTesto = new javax.swing.JTextField();
        buttonOk = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Chat");
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        sfondo.setBackground(new java.awt.Color(0, 0, 0));

        jTextArea1.setBackground(new java.awt.Color(0, 0, 0));
        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jTextArea1.setEnabled(false);
        jScrollPane1.setViewportView(jTextArea1);

        areaDiTesto.setBackground(new java.awt.Color(0, 0, 0));
        areaDiTesto.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        areaDiTesto.setForeground(new java.awt.Color(255, 255, 255));

        buttonOk.setBackground(new java.awt.Color(255, 255, 255));
        buttonOk.setFont(new java.awt.Font("Segoe UI", 1, 20)); // NOI18N
        buttonOk.setForeground(new java.awt.Color(0, 0, 0));
        buttonOk.setText("OK");
        buttonOk.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonOkActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout sfondoLayout = new javax.swing.GroupLayout(sfondo);
        sfondo.setLayout(sfondoLayout);
        sfondoLayout.setHorizontalGroup(
            sfondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(sfondoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(sfondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(sfondoLayout.createSequentialGroup()
                        .addComponent(areaDiTesto, javax.swing.GroupLayout.PREFERRED_SIZE, 418, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(buttonOk, javax.swing.GroupLayout.DEFAULT_SIZE, 83, Short.MAX_VALUE))
                    .addComponent(jScrollPane1))
                .addContainerGap())
        );
        sfondoLayout.setVerticalGroup(
            sfondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(sfondoLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 409, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(sfondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(areaDiTesto)
                    .addComponent(buttonOk, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(sfondo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(sfondo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Metodo che gestisce l'evento dell'interazione di un'utente con il bottone Ok.
     * @param evt 
     */
    private void buttonOkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonOkActionPerformed
        String messaggio = areaDiTesto.getText();
        
        try{
            client.inviaMessaggio(messaggio);
            areaDiTesto.setText("");
        }catch (IOException e) {
            System.err.println("Eccezione nella classe InterfacciaChat e nel metodo buttonOkActionPerformed: " + e.getMessage());
        }
    }//GEN-LAST:event_buttonOkActionPerformed

    /**
     * Metodo che gestisce l'evento dell'interazione di un'utente con il bottone di chiusura del JFrame.
     * @param evt 
     */
    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        try {
            this.socket.close();
        } catch (IOException ex) {
            Logger.getLogger(InterfacciaChat.class.getName()).log(Level.SEVERE, null, ex);
        }
        this.dispose();
    }//GEN-LAST:event_formWindowClosing

    /**
     * Metodo che mostra un messaggio passato in input, sulla JTextArea.
     * @param messaggio 
     */
    public void mostraMessaggio(String messaggio){
        SwingUtilities.invokeLater(() -> {
            jTextArea1.append(messaggio + "\n");
        });
    }

    /**
     * Metodo che verifica se un'utente è in grado di connettersi, in base al nome che sceglie.
     * @param nomeUtente
     * @param tentativo
     * @return un booleano
     */
    private static boolean tentaConnessione(String nomeUtente, Socket tentativo){
        if(nomeUtente == null || nomeUtente.trim().isEmpty()){
            return false;
        }else{
            try{
                BufferedWriter out = new BufferedWriter(new OutputStreamWriter(tentativo.getOutputStream()));
                BufferedReader in = new BufferedReader(new InputStreamReader(tentativo.getInputStream()));
                out.write(nomeUtente);
                out.newLine();
                out.flush();
                String rispostaServer = in.readLine();
                if(rispostaServer.equals(NOME_UTENTE_NON_DISPONIBILE)){
                    JOptionPane.showMessageDialog(null, "Nome utente già in uso. Sceglierne un altro", "Errore", JOptionPane.ERROR_MESSAGE);
                    tentativo.close();
                    return false;
                }
            }catch(IOException e){
                System.err.println("Eccezione nella classe InterfacciaChat e nel metodo tentaConnessione: " + e.getMessage());
            }
            return true;
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(InterfacciaChat.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(InterfacciaChat.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(InterfacciaChat.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(InterfacciaChat.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        SwingUtilities.invokeLater(() -> {
            try {
                String nomeUtente = JOptionPane.showInputDialog("Inserire il nome utente: ");
                Socket clientSocket = new Socket("localhost", 6666);
                if (InterfacciaChat.tentaConnessione(nomeUtente, clientSocket)){
                    new InterfacciaChat(clientSocket, nomeUtente).setVisible(true);
                }else{
                    clientSocket.close();
                }
            }catch(IOException e){
                JOptionPane.showMessageDialog(null, "Connesione rifiutata.", "Errore connessione server", JOptionPane.ERROR_MESSAGE);
                Logger.getLogger(InterfacciaChat.class.getName()).log(Level.SEVERE, null, e);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField areaDiTesto;
    private javax.swing.JButton buttonOk;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JPanel sfondo;
    // End of variables declaration//GEN-END:variables
}
